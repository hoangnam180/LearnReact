{
    "sourceFile": "src/features/Product/pages/ListPage/ListPage.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1646238286017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1646290431629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,11 +21,11 @@\n         const params = queryString.parse(location.search);\n         console.log(params);\n         return {\n             ...params,\n-            _sort:params._sort || 'salePrice:ASC',\n             _page:parseInt(params._page) || 1,\n             _limit:parseInt(params._limit) || 16,\n+            _sort:params._sort || 'salePrice:ASC',\n             isPromotion:params.isPromotion === 'true',\n             isFreeShip:params.isFreeShip === 'true'\n         };\n     },[location.search]) \n"
                },
                {
                    "date": 1646484060810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,8 @@\n     const navagation =  useNavigate()\n     const location = useLocation();\n     const queryParams = useMemo(()=>{\n         const params = queryString.parse(location.search);\n-        console.log(params);\n         return {\n             ...params,\n             _page:parseInt(params._page) || 1,\n             _limit:parseInt(params._limit) || 16,\n"
                }
            ],
            "date": 1646238286017,
            "name": "Commit-0",
            "content": "import { Col, Row } from \"reactstrap\";\nimport {useEffect, useMemo, useState} from 'react';\nimport queryString from 'query-string';\nimport products from '../../../../API/products';\nimport ProductList from '../../compennents/ProductList/ProductList';\nimport ProductSkeletonList from \"../../compennents/ProductSkeletonLists/ProductSkeletonList\";\nimport './ListPage.scss';\nimport Pagination from \"../../compennents/Pagination/Pagination\";\nimport Tabs from \"../../compennents/Tabs/Tabs\";\nimport ProductFilter from \"../../compennents/ProductFilter/ProductFilter\";\nimport FilterViewer from \"../../compennents/FilTers/FilterViewer\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\n\nconst Listpage = () => {\n    const [productsList, setProductsList] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const navagation =  useNavigate()\n    const location = useLocation();\n    const queryParams = useMemo(()=>{\n        const params = queryString.parse(location.search);\n        console.log(params);\n        return {\n            ...params,\n            _sort:params._sort || 'salePrice:ASC',\n            _page:parseInt(params._page) || 1,\n            _limit:parseInt(params._limit) || 16,\n            isPromotion:params.isPromotion === 'true',\n            isFreeShip:params.isFreeShip === 'true'\n        };\n    },[location.search]) \n\n    const [pagination, setPagination] = useState({\n        page:1,\n        limit:16,\n        total:0,\n    });\n\n\n    useEffect(() => {\n        (async () => {\n            try{\n                const response = await products.getAll(queryParams);\n                setProductsList(response.data);\n                setPagination(response.pagination);\n            }catch(error){\n                console.log('Fail to get products', error);\n            }\n            setLoading(false);\n        })();\n    },[queryParams]);\n\n\n    const handlePageChange = (page) => {\n            window.scrollTo({\n                top: 0,\n                left: 0,\n                behavior: \"smooth\"\n              });\n        const fillter = {\n            ...queryParams,\n            _page:page,\n        }\n        navagation(`/products?${queryString.stringify(fillter)}`);\n    }\n\n    const handleSortChange = (newValue) => {\n        const fillter = {\n            ...queryParams,\n            _sort:newValue,\n        }\n        navagation(`/products?${queryString.stringify(fillter)}`);\n    }\n    \n    const handleFilterChange = (newFillter) => {\n        const fillter = {\n            ...queryParams,\n            ...newFillter,\n        }\n        navagation(`/products?${queryString.stringify(fillter)}`);\n    }\n    const handleCount = () => {\n        if(pagination.total && pagination.limit){\n            return Math.ceil(pagination.total/pagination.limit);\n        }\n    }\n    const setnewFillter = (newFillter) => {\n        navagation(`/products?${queryString.stringify(newFillter)}`);\n    }\n\n    \n    const local_storage = JSON.parse(localStorage.getItem('category')) || [];\n    const count = handleCount() || 1;\n    const [categoryObj,setCategory] = useState(local_storage);\n    const getLabelCategories = (category) => {\n        localStorage.setItem('category', JSON.stringify(category));\n        setCategory(category);\n    }\n    \n\n    return (  \n            <Row>\n                <Col className=\"left_product\"><ProductFilter getCategory={getLabelCategories}  fillter={queryParams} handleFilterChange={handleFilterChange}/></Col>\n                <Col className=\"right_product\">\n                    <h3 style={{paddingLeft:'20px'}}>Sắp Xếp Theo</h3>\n                    <Tabs currentSort={queryParams._sort} onChange={handleSortChange}/>\n                    <FilterViewer category={categoryObj} filters={queryParams} onChange={setnewFillter}/>\n                    {loading ?  <ProductSkeletonList /> : <ProductList productsList={productsList}  />} \n                    <Pagination count={count} page={pagination.page} onPageChange={handlePageChange}\n                    />\n                </Col>\n            </Row>           \n    );\n}\n \nexport default Listpage;\n"
        }
    ]
}